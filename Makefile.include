SHELL := /bin/bash
export PYTHONUNBUFFERED := 1
BASE := $(shell /bin/pwd)
VENV_BASE ?= .venv
VENV_DIR := $(BASE)/${VENV_BASE}

PY_VERSION ?= 3.7
PYTHON := $(shell /usr/bin/which python$(PY_VERSION))
ifeq ($(PY_VERSION), 2.7)
	VIRTUALENV := virtualenv -p $(PYTHON)
else
	VIRTUALENV := $(PYTHON) -m venv
endif

VERSION ?= SNAPSHOT
BUNDLE ?= ""
ZIP_FILE := $(BASE)/target/${BUNDLE}-${VERSION}.zip
EXCLUDES := -x ./pkg_resources/\* ./__pycache__/\* ./setuptools*/\* ./pip*/\* __pycache__ *.pyc

.DEFAULT_GOAL := all
.PHONY: build._subdir bundle._subdir test build bundle all


build.init:
	$(VIRTUALENV) "$(VENV_DIR)" &>/dev/null
	@mkdir -p "$(VENV_DIR)/lib64/python$(PY_VERSION)/site-packages"
	@touch "$(VENV_DIR)/lib64/python$(PY_VERSION)/site-packages/file"
	@find "$(VENV_DIR)" -name "*.pyc" -exec rm -f {} \;

build.python: build.init
	"$(VENV_DIR)/bin/python" setup.py install

build.subdir: build._subdir

ifeq ($(BUNDLE),"")
build:
else
build: build.python build.subdir
endif

bundle.init:
	mkdir -p target

bundle.requirements: bundle.init
	@cd "$(VENV_DIR)/lib/python$(PY_VERSION)/site-packages" && zip -r9 "$(ZIP_FILE)" * $(EXCLUDES) &>/dev/null
	@cd "$(VENV_DIR)/lib64/python$(PY_VERSION)/site-packages" && zip -r9 "$(ZIP_FILE)" * $(EXCLUDES) &>/dev/null

bundle.python: bundle.init
	@cd "src" && zip -r9 "$(ZIP_FILE)" *.py $(EXCLUDES) &>/dev/null

bundle.subdir: bundle._subdir

ifeq ($(BUNDLE),"")
bundle:
else
bundle: bundle.init bundle.requirements bundle.python bundle.subdir
endif

lambci:
	docker run --rm -v $$PWD/../:/var/task -e VENV_BASE=.venvdocker -it lambci/lambda:build-python3.7 /bin/bash -c 'cd $(notdir $(CURDIR)) && make build bundle'

all: test build bundle

test:
	tox

clean:
	@echo "cleaning $(BASE)"
	@rm -rf $(VENV_DIR) src/*.egg-info/ temp .pytest_cache/ .coverage .venvdocker .tox target dist build
